<style>
    #pip-container {
        background: transparent;
        width: 99px;
        height: 100px;
        display: grid;
        grid-template-columns: 33px 33px 33px;
        grid-gap: 0;
    }

    .pips {
        height: 100%;
        width: 100%;
        align-items: stretch;
    }

    .pips span {
        position: relative;
        display: flex;
        align-items: center;
        width: 33%;
        height: 30px;
        box-sizing: border-box;
        background-color: black;
        border: 1px solid white;
        margin: 10px;
        border-radius: 20px;
    }

    .pips span.active {
        background-color: #42D6CA;
        border-color: #white;
    }

    .pips span.half-active {
        background: linear-gradient(to bottom, #000000 0%, #000000 46%, #42d6ca 50%, #42d6ca 100%);
    }

    #pip-container .systems {
        background-color: rgba(0, 0, 255, 0.2);
    }

    #pip-container .engines {
        background-color: rgba(0, 255, 0, 0.2);
    }

    #pip-container .weapons {
        background-color: rgba(255, 0, 0, 0.2);
    }
</style>

<div class="row">
    <div id="time">Game Time:
        <i></i>
    </div>

    <div class="pure-g">
        <div class="pure-u-1-3">
            <h3>Ship Info</h3>
            <table id="ship-info-table" class="pure-table">
                <thead>
                    <tr>
                        <th>Property</th>
                        <th>Value</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <th scope="row">Vehicle Type</th>
                        <td></td>
                    </tr>
                    <tr>
                        <th scope="row">Ship Name</th>
                        <td></td>
                    </tr>
                    <tr>
                        <th scope="row">Docked</th>
                        <td></td>
                    </tr>
                    <tr>
                        <th scope="row">Gear Deployed</th>
                        <td></td>
                    </tr>
                    <tr>
                        <th scope="row">Shields up</th>
                        <td></td>
                    </tr>
                    <tr>
                        <th scope="row">FSD Status</th>
                        <td></td>
                    </tr>
                </tbody>
            </table>
        </div>

        <div class="pure-u-1-3">
            <h3>Pips</h3>
            <div id="pip-container">
                <div class="pips systems">
                    <span></span>
                    <span></span>
                    <span></span>
                    <span></span>
                </div>
                <div class="pips engines">
                    <span></span>
                    <span></span>
                    <span></span>
                    <span></span>
                </div>
                <div class="pips weapons">
                    <span></span>
                    <span></span>
                    <span></span>
                    <span></span>
                </div>
            </div>
        </div>
        <div class="pure-u-1-3">
            <p>Thirds</p>
        </div>
    </div>



    <script type="text/javascript" src="node_modules/nes/dist/client.js"></script>
    <script>
        var client = new nes.Client('ws://localhost:12342');

        const start = async () => {

            const timeEl = document.getElementById('time');

            const pipContainer = document.getElementById('pip-container');

            const handler = (update, flags) => {
                console.log(update);

                const time = new Date(update.timestamp).toISOString().slice(-13, -5);
                timeEl.children[0].innerText = time;

                const sysElms = Array.from(document.querySelectorAll('.systems span')).reverse();
                const engElms = Array.from(document.querySelectorAll('.engines span')).reverse();
                const wepElms = Array.from(document.querySelectorAll('.weapons span')).reverse();

                const maxSysPips = Math.ceil(update.pips.sys);
                const maxEngPips = Math.ceil(update.pips.eng);
                const maxWepPips = Math.ceil(update.pips.wep);

                console.log(`System: ${update.pips.sys}/${maxSysPips}, Engine: ${update.pips.eng}/${maxEngPips}, Weapon: ${update.pips.wep}/${maxWepPips}`);

                function valToElm(element, index, val) {
                    if (index < Math.ceil(val)) {
                        const check = val - index;
                        if (check > 1 || Number.isInteger(check)) {
                            element.classList.add('active');
                        } else {
                            element.classList.add('half-active');
                        }
                    }
                }

                sysElms.forEach((element, index) => {
                    element.classList.remove('active');
                    element.classList.remove('half-active');
                    valToElm(element, index, update.pips.sys);
                });
                engElms.forEach((element, index) => {
                    element.classList.remove('active');
                    element.classList.remove('half-active');
                    valToElm(element, index, update.pips.eng);
                });
                wepElms.forEach((element, index) => {
                    element.classList.remove('active');
                    element.classList.remove('half-active');
                    valToElm(element, index, update.pips.wep);
                });
            };

            await client.connect();
            client.subscribe('/stream/status', handler);
        };

        start();
    </script>
