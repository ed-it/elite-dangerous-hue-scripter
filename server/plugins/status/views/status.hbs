<style>
    #landing-gear {
        width: 200px;
        height: 200px;
    }

    #landing-gear.active {
        background-image: url('images/landing-gear.png');
    }
</style>

<div class="row">
    <span id="time">Game Time: <i></i></span>

    <div id="pip-container">
        <div class="pips systems">
            <span></span>
            <span></span>
            <span></span>
            <span></span>
        </div>
        <div class="pips engines">
            <span></span>
            <span></span>
            <span></span>
            <span></span>
        </div>
        <div class="pips weapons">
            <span></span>
            <span></span>
            <span></span>
            <span></span>
        </div>
    </div>

    <table class="table" id="pips">
        <thead>
            <caption>Pips</caption>
            <tr>
                <th>System</th>
                <th>Engine</th>
                <th>Weapons</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td></td>
                <td></td>
                <td></td>
            </tr>
        </tbody>
    </table>
    <ul id="status-list">

    </ul>
</div>

<div class="icons">
    <div id="landing-gear"></div>
</div>

<script type="text/javascript" src="node_modules/nes/dist/client.js"></script>
<script>
    var client = new nes.Client('ws://localhost:12342');

    const start = async () => {

        const timeEl = document.getElementById('time');
        const pipsTable = document.getElementById('pips');
        const statusList = document.getElementById('status-list');
        const landingGear = document.getElementById('landing-gear');

        const handler = (update, flags) => {
            console.log(update);

            const time = new Date(update.timestamp).toISOString().slice(-13, -5);
            timeEl.children[0].innerText = time;

            const sysElms = Array.from(document.querySelectorAll('.systems span')).reverse();
            const engElms = Array.from(document.querySelectorAll('.engines span')).reverse();
            const wepElms = Array.from(document.querySelectorAll('.weapons span')).reverse();

            const maxSysPips = Math.ceil(update.pips.sys);
            const maxEngPips = Math.ceil(update.pips.eng);
            const maxWepPips = Math.ceil(update.pips.wep);
            console.log(`System: ${update.pips.sys}/${maxSysPips}, Engine: ${update.pips.eng}/${maxEngPips}, Weapon: ${update.pips.wep}/${maxWepPips}`);

            function valToElm(element, maxVal, index) {
                if (index < maxVal) {
                    if (index % 2 === 0) {
                        return element.classList.add('active');
                    }
                }
                if (index === maxVal) {
                    if (index % 2 === 0) {
                        return element.classList.add('active');
                    }
                    return element.classList.add('half-active');
                }
            }

            sysElms.forEach((element, index) => {
                // Remove any classes
                element.classList.remove('active');
                element.classList.remove('half-active');
                // Add active to the 
                valToElm(element, maxSysPips, index);
            });
            engElms.forEach((element, index) => {
                // Remove any classes
                element.classList.remove('active');
                element.classList.remove('half-active');
                valToElm(element, maxEngPips, index);
            });
            wepElms.forEach((element, index) => {
                // Remove any classes
                element.classList.remove('active');
                element.classList.remove('half-active');
                valToElm(element, maxWepPips, index);
            });

            pipsTable.querySelectorAll('td').forEach((el, index) => {
                if (index === 0) el.innerText = update.pips.sys;
                if (index === 1) el.innerText = update.pips.eng;
                if (index === 2) el.innerText = update.pips.wep;
            });

            statusList.innerHTML = Object.keys(update.status).map(key => {
                return `<li><strong>${key}:</stong>${update.status[key]}</li>`;
            }).join('');

            if (update.status.landing_gear_down) {
                landingGear.classList.add('active')
            } else {
                landingGear.classList.remove('active');
            }
        };

        await client.connect();
        client.subscribe('/stream/status', handler);
    };

    start();
</script>
